---
layout: post
title:  "Single Responsibility Principle in Ruby"
date:   2012-03-31 20:22:00 +0100
categories: ruby
---

The Single Responsibility Principle (SRP) is the following: “A class should have a single responsibility.”  In other words, any complicated classes should be divided into smaller classes that are each responsible  for a particular behaviour, making it easier to understand and maintain your codebase. While the concept behind the SRP is quite clear, however, developers admit that putting this principle into practice requires some skill, since a class’s responsibility isn’t always immediately clear. Considering responsibility as a reason to change and concludes that a class and a module should have the only reason to be changed. Combining two entities that change for different reasons at different times is bad design. Leaving each class with a single responsibility makes classes maintainable. The goal of the SRP principle is to fight complexity that creeps in while you’re developing an application’s logic.

Now let’s take a look at an example of code that doesn’t follow the single responsibility principle:

{% gist fd83b2ba083d466fa3f747ea48a09464 %}

The class FinancialReportMailer shown above handles two tasks: report generation (method “generate_report!”) and report sending (method “send_report”). The class looks quite simple as written. However, expanding this class in the future may be problematic, since we’ll likely have to change the logic of the class. The SRP principle tells us that a class should implement one single task, and therefore according to this principle we should divide the FinancialReportMailer class into two classes.

Let’s see what this code looks like after we’ve refactored it to comply with the SRP:

{% gist f7a8399f9e2c4ea349ecb4aceb2b00bf %}

After refactoring, we have two classes that each perform a specific task. The FinancialReportMailer class sends emails containing texts generated by the FinancialReportGenerator class. If we wanted to expand the class responsible for report generation in the future, we could simply make the necessary changes without having to touch the FinancialReportMailer class.